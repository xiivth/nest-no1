generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Certificates {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  certificateUUID      String    @unique
  certificateHash      String    @unique
  certificateJson      String
  certificateNo        String?
  courseName           String
  recipientName        String
  recipientEmail       String
  instituteId          String    @db.ObjectId
  certificateSignature Signature
  issuerId             String    @db.ObjectId
  issueDate            DateTime
  batchId              String?
  transactionHash      String?
  certificateRevoked   Boolean   @default(false)
  createdBy            String    @db.ObjectId
  createdAt            DateTime  @default(now())
  updatedBy            String    @db.ObjectId
  updatedAt            DateTime  @updatedAt
}

type Signature {
  leaf   String
  proofs String[]
  root   String
}

model Certificatetrees {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  root            String    @unique
  treeDumpData    TreeDump
  transactionHash String?
  transactionDate DateTime?
  revoked         Boolean  @default(false)
  revokedDate     DateTime?
  createdBy       String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedBy       String   @db.ObjectId
  updatedAt       DateTime @updatedAt
}

type TreeDump {
  format       String
  leafEncoding String[]
  tree         String[]
  values       TreeDumpValues[] 
}

type TreeDumpValues {
  treeIndex Int
  value     String[]
}

model Institutes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  instituteName String   @unique
  instituteAbbr String   @unique
  active        Boolean  @default(true)
  createdBy     String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedBy     String   @db.ObjectId
  updatedAt     DateTime @updatedAt

  users         Users[]
}

model Users {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  email       String      @unique
  password    String
  userName    String?
  role        Role        @default(user)
  instituteId String?     @db.ObjectId
  active      Boolean     @default(true)
  createdBy   String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedBy   String      @db.ObjectId
  updatedAt   DateTime    @updatedAt

  institute   Institutes? @relation(fields: [instituteId], references: [id])
}

enum Role {
  user
  issuer
  admin
}
